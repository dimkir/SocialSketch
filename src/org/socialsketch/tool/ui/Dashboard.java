package org.socialsketch.tool.ui;

import javax.swing.JFrame;
import org.apache.log4j.Logger;
import org.socialsketch.tool.ServiceLocator;
import org.socialsketch.tool.tweetqueue.AbstractTweet;

/**
 *
 * @author Dimitry Kireyenkov <dimitry@languagekings.com>
 */
public class Dashboard extends javax.swing.JPanel
implements IBasicPassiveUI, ServiceLocator.ServiceRecord
{

    private IBasicUIActionListener mUIActionListener;
    private final static Logger logger = org.apache.log4j.Logger.getLogger(DashFrame.class);    
    private JFrame mDashboardParentFrame;
    /**
     * Creates new form Dashboard
     */
    public Dashboard() {
        initComponents();
        mConsolePane = new Consolepane();

        jTabbedPane1.add("Console", mConsolePane);
        for(int i = 0 ; i < 5 ; i++){
            jTabbedPane1.add("Conversation pane " + i, new ConversationPane());
        }  
        
    }

    /**
     * @return the mConsolePane
     */
    public Consolepane getmConsolePane() {
        return mConsolePane;
    }

    /**
     * @param mConsolePane the mConsolePane to set
     */
    public void setmConsolePane(Consolepane mConsolePane) {
        this.mConsolePane = mConsolePane;
    }
    private Consolepane mConsolePane;
    
    

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jTabbedPane1 = new javax.swing.JTabbedPane();

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jTabbedPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 398, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jTabbedPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 416, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTabbedPane jTabbedPane1;
    // End of variables declaration//GEN-END:variables

    @Override
    public void addTweet(AbstractTweet aTweet) {
        getmConsolePane().addLine(aTweet.toString());
    }
    
    
    /**
     * Fires action, however in case no listener is registered
     * @throws RuntimeException
     * 
     * @param a ui action.
     */
    private void fireUIAction(BasicPassiveUIAction a){
        if ( mUIActionListener != null ){
            mUIActionListener.onBasicUIAction(this, a);
        }
        else{
            String msg = "There was no registered listener for the action";
            logger.debug(msg);
            throw new RuntimeException(msg);
        }
        
    }
    
    @Override
    public void setOnBasicUIActionListener(IBasicUIActionListener listener) {
        mUIActionListener = listener;
    }
    

    


    /**
     * 
     * @return NULL in case there's no parent dash frame (eg. we're embedded as panel)
     */
    @Override
    public JFrame getJFrame() {
        if ( mDashboardParentFrame == null ){
            logger.debug("getJFrame() is called and returned value is NULL");
        }
        else{
            logger.debug("getJFrame() is called and returned value is " + mDashboardParentFrame.toString() );
        }
        return mDashboardParentFrame;
    }    

    void setDashboardParentFrame(JFrame frame) {
        mDashboardParentFrame = frame;
    }

    @Override
    public String getServiceDescription() {
        return "Dashboard panel implementing Simple Passive UI";
    }

    @Override
    public void setUIVisible(boolean visibleFlag) {
        if ( getJFrame() != null ){
            getJFrame().setVisible(visibleFlag);
        }
    }


}
